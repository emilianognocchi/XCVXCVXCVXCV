

DefVacias. ListaDefiniciones ::=;
ConsDef. ListaDefiniciones ::= Def ListaDefiniciones;


EArgs. Argss ::= String;
DArgs. Args ::= "(" [Argss] ")" "{" [Stm] "}";
separator Args ","; 
separator Argss ","; 


PProg. Program ::= [Def];
Dfun. Def ::= Type Ident [Args] ;
terminator Def ";";
terminator Def "";
separator nonempty Def "";
separator nonempty Args ";";

SComment. Args ::= "(*" String "*)";

--SIdentificador. Ident ::="String";
separator Ident "";
-- int x
SDeclaracion.  Stm ::= Type Ident; 
-- int i,j,k;
SListaDeclaraciones. Stm ::= Type Ident "," [Ident] ";"; 
-- int x = 3;
SFullDeclaracion. Stm ::= Type Ident "=" Exp ";"; 


SExp.		Stm ::= Exp ";";
SMay.       Stm ::= Exp2 "<" Exp2;
SMen.       Stm ::= Exp2 ">" Exp2;
SMayIgual.  Stm ::= Exp2 "<=" Exp2;
SMenIgual.  Stm ::= Exp2 ">=" Exp2;
SIgual.     Stm ::= Exp2 "==" Exp2;

--============ BLOQUES DE PROGRAMACION ================>
SBloc.      Stm ::= [Stm] ;                   --??
SBlocFull.      Stm ::= "{" [Stm] "}";
SIfStm.     Stm ::= "if" "(" Exp ")" Stm Else;
SElseStm. 	Else ::= "else" Stm;
SElseNull. Else ::=;         
SWhile.     Stm ::= "while" "(" Exp ")" Stm;
SFor.       Stm ::= "for" "(" Exp ")" Stm;
SReturn.	Stm ::= "return" Exp";";

--============ EXPRESIONES ================>
EInt. Exp15 ::= Integer;
EDouble. Exp15 ::= Double;
EString. Exp15 ::= String;
ETrue. Exp15 ::= "true";
EFalse. Exp15 ::= "false";
EIdent. Exp15 ::= Ident; 

EIncrementoMasDerecha. Exp14 ::= Exp14 "++";
EIncrementoMenosDerecha. Exp14 ::= Exp14 "--";

EIncrementoMasIzquierda. Exp13 ::= "++" Exp14;
EIncrementoMenosIzquierda. Exp13 ::= "--" Exp15;
ENegacion. Exp13 ::= "-" Exp13;


EAdd. Exp0 ::= Exp0 "+" Exp1;
EAssign. Exp ::= Exp1;
EMult. Exp1 ::= Exp1 "*" Exp2;
EExp. Exp1 ::= Exp2;
ENum. Exp2 ::= Integer; --String,  

--coercions Exp15;
separator Exp ",";

--============ ASIGNACIONES ================> x := x + 1.
SAsignacion.     Stm ::= Type Ident "=" " "; 
SAsignVacio.     Stm ::= Type Ident "=" ""; 
separator Stm "";

SLiteral. Lit ::= String;
 
DeclaracionConstante. DeclConst ::= Ident  "=" Lit;
SConst. Const ::= "const" [ DeclConst ];  --identificador 
terminator DeclConst ";";
 
DeclaracionType. Type ::= Type "=" Type ";";
--SType. Type ::= "type" [ ];

--============ INSTRUCTIONS =================> program ...; ... begin ... <instruccion>; <instruccion>; <instruccion> ... end.
SBegin. Stm ::= "begin " [Instruction] "end.";
separator nonempty Stm ";";
SIntrucction. Instruction ::= [Type];
separator nonempty  Instruction ";";

TIdent. Type ::= Ident;
TInt. Type ::= "void";
TChar. Type ::= "char";
TString. Type ::= "string";


--============ TYPE ENUM =====================> (lunes, martes, miercoles, jueves, viernes)
SIdentEnum. IdentEnum::= String "," ;
SFinalIdentEnum. IdentEnum::= String ")";
SEnum. Type ::= "(" [Ident];
separator nonempty  Type ";";


--============ TYPE SUBRANGOS ================> 1..100 o lunes..miercoles
SSubrangInt. Type ::= Integer ".." Integer ";";
SSubrangString. Type ::= String ".." String ";";


--============ PUNTEROS  ================> ^nodolista
SPuntero. Type ::= "^" Ident; --???????


--============ ARREGLOS  ================> array[1..50] of integer
SArrayReal. Stm 	::= "array[" Integer ".." Integer "] of real;"; --???????
SArrayString. Stm 	::= "array[" Integer ".." Integer "] of String;"; --???????
SArrayInteger. Stm 	::= "array[" Integer ".." Integer "] of Integer;"; --???????
SArrayBoolean. Stm 	::= "array[" Integer ".." Integer "] of Boolean;"; --???????



--============ REGISTROS  ================> 
--record
--x, y, z : real;
--i : integer;
--order : (lt, gt, eq)
--end

SVariableDeRegistroInteger. Reg ::= [Stm] ":" Exp2;   --puse STM pero esta mal. solo para q compile
SVariableDeRegistroString. Reg ::= [Stm] ":" Ident;  
SRegistro. Registro ::= "record" [Reg] "end;";
terminator Reg ";";

--============ IDENTIFICADORES  ================> boolean, char, integer, real
--SIdentBoolean. Type ::= String;
--SIdentChar. Type ::= Char;
--SIdentInteger. Type ::= Integer;
SIdentVoid. Type ::= "void";
SIdentString. Type ::= "string";
TIdentChar. Type ::= "char";
TIdentBool. Type ::= "bool";
TIdentInt. Type ::="int";

--============ FUNCTIONS  ================> function suma (a, b : integer; var z : real) : integer;

SFunction. Function ::= "function" String "(" [Stm] ")" ":" Type;

