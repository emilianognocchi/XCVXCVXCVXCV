

DefVacias. ListaDefiniciones ::=;
ConsDef. ListaDefiniciones ::= Def ListaDefiniciones;

comment "(*" "*)"; 
SProgram. Program ::= "program" Type ";" Const BloqueVariables BloqueVariables BloquePrincipal [Funciones] [Instrucciones];
BloqueVariables. BloqueVariables ::= var[Variables]


SWriteline. Stm ::= "writeln(" Literal ");";
SWritelineVacio. Stm ::= "writeln;";
SWrite. Stm ::= "Write(" Literal ");";  --esta linea aumenta muchisimo los conflictos!!!!!
SReadline. Stm ::= "readln(" [Literal] ");"; --esta linea aumenta muchisimo los conflictos!!!!!
SReadLineVacio. Stm ::= "Readln;"; --esta linea aumenta muchisimo los conflictos!!!!!
SWriteLine. Stm ::= "Writeln(\"" [TextoConVariables] "\");"; --esta linea aumenta muchisimo los conflictos!!!!!


--SIdentificador. Ident ::="String"; esta linea falla pq no deja crear un identificador custom..!!
separator Ident "";
-- int x
SDeclaracion.  Stm ::= Type Ident; 
-- int i,j,k;
SListaDeclaraciones. Stm ::= Type Ident "," [Ident] ";"; 
-- int x = 3;
SFullDeclaracion. Stm ::= Type Ident "=" Exp ";"; 

SExp.		Stm ::= Exp ";";
SMay.       Stm ::= Exp2 "<" Exp2;
SMen.       Stm ::= Exp2 ">" Exp2;
SMayIgual.  Stm ::= Exp2 "<=" Exp2;
SMenIgual.  Stm ::= Exp2 ">=" Exp2;
SIgual.     Stm ::= Exp2 "==" Exp2;
SFunction. Stm ::= Ident "("  [ Exp ] ")"; --OK
SCallEmpty. Stm ::= Ident; -- OK
		
--============ BLOQUES DE PROGRAMACION ================>
SBloc.      Stm ::= [Stm];       
SBlocFull.      Stm ::= "{" [Stm] "}";
SIfStm.     Stm ::= "if" "(" Exp ")" Stm Else;
SElseStm. 	Else ::= "else" Stm;
SElseNull.  Else ::=;         
SWhile.     Stm ::= "while" "(" Exp ")" Stm;
SFor.       Stm ::= "for" "(" Exp ")" Stm;
SReturn.	Stm ::= "return" Exp";";

--============ EXPRESIONES ================>
EInt. Exp15 ::= Integer;
EDouble. Exp15 ::= Double;
EString. Exp15 ::= String;
ETrue. Exp15 ::= "true";
EFalse. Exp15 ::= "false";
EIdent. Exp15 ::= Ident; 

EIncrementoMasDerecha. Exp14 ::= Exp14 "++";
EIncrementoMenosDerecha. Exp14 ::= Exp14 "--";

EIncrementoMasIzquierda. Exp13 ::= "++" Exp14;
EIncrementoMenosIzquierda. Exp13 ::= "--" Exp15;
ENegacion. Exp13 ::= "-" Exp13;
EMod. Exp12 ::= Exp13 "mod" Exp13;
ESuma. Exp12 ::= Exp13 "/" Exp13;
ESuma. Exp12 ::= Exp13 "*" Exp13;
ESuma. Exp11 ::= Exp12 "+" Exp12;
EResta. Exp11 ::= Exp11 "-" Exp11;
EMayorIgual. Exp9 ::= Exp8 ">=" Exp8;
EMenorIgual. Exp9 ::= Exp8 "<=" Exp8;
EMayor. Exp9 ::= Exp8 ">" Exp8;
EMenor. Exp9 ::= Exp8 "<" Exp8;
EIgual. Exp8 ::= Exp8 "==" Exp8;
EOr. Exp3 ::= Exp2 "||" Exp2;
EAnd. Exp3 ::= Exp2 "&&" Exp2;
EAdd. Exp0 ::= Exp0 "+" Exp1;
EAssign. Exp ::= Exp1; 
EExp. Exp1 ::= Exp2;
ENum. Exp2 ::= Integer; --String,  

--coercions Exp15;
separator Exp ",";

--============ ASIGNACIONES ================> x := x + 1.
SAsignacion.     Stm ::= Type Ident "=" " "; 
SAsignVacio.     Stm ::= Type Ident "=" ""; 
separator Stm "";

SLiteral. Lit ::= String;
SLiteral2. Lit ::= Double;
SLiteral3. Lit ::= Char;

 

 
DeclaracionType. Type ::= Type "=" Type ";";
--SType. Type ::= "type" [ ];

--============ INSTRUCTIONS =================> program ...; ... begin ... <instruccion>; <instruccion>; <instruccion> ... end.

--============ VARIABLES  ================> 
SVariable. BloqueVariables 	::= "var" [NombreVariables] ":" Type ";";
SNombreVariables. BloqueVariables ::= Ident;
separator BloqueVariables ",";

--SBloque2. BloquePrincipal ::= "var" [NombreVariables] ":" Type";" "begin" [Stm] "end."; -- con esta linea se cuelga....


SBloque. BloquePrincipal ::= "begin" [Stm] "end.";
separator nonempty BloquePrincipal ";";


DeclaracionConstante. DeclConst ::= Ident  "=" Lit;
SConst. BloquePrincipal ::= "const" [ DeclConst ]; -- mismo problema que con el begin, no se como concatenar cada una de las partes!
terminator DeclConst ";";


separator nonempty Stm ";";
SIntrucction. Instruction ::= [Type];
separator nonempty  Instruction ";";

TIdent. Type ::= Ident;
TInt. Type ::= "void";
TChar. Type ::= "char";
TString. Type ::= "string";


--============ TYPE ENUM =====================> (lunes, martes, miercoles, jueves, viernes)
SIdentEnum. IdentEnum::= String "," ;
SFinalIdentEnum. IdentEnum::= String ")";
SEnum. Type ::= "(" [Ident];
separator nonempty  Type ";";


--============ TYPE SUBRANGOS ================> 1..100 o lunes..miercoles
SSubrangInt. Type ::= Integer ".." Integer ";";
SSubrangString. Type ::= String ".." String ";";


--============ PUNTEROS  ================> ^nodolista
SPuntero. Type ::= "^" Ident;


--============ ARREGLOS  ================> array[1..50] of integer
SArrayString. Stm 	::= "array[" Integer ".." Integer "] of" Args ";"; 


--============ REGISTROS  ================> 
--record
--x, y, z : real;
--i : integer;
--order : (lt, gt, eq)
--end

SVariableDeRegistroInteger. Reg ::= [Stm] ":" Exp2;   --puse STM pero esta mal. solo para q compile
SVariableDeRegistroString. Reg ::= [Stm] ":" Ident;  
SRegistro. Registro ::= "record" [Reg] "end;";
terminator Reg ";";

--============ IDENTIFICADORES  ================> boolean, char, integer, real
SIdentVoid. Type ::= "void";
SIdentString. Type ::= "string";
SIdentStringClass. Type ::= "String";
TIdentChar. Type ::= "char";
TIdentBool. Type ::= "bool";
TIdentInt. Type ::="int";
TComa. Type ::="\""; --funciona pero aumenta mucho los conflictos

TComaSimple. Type ::="'";

--============ FUNCTIONS  ================> function suma (a, b : integer; var z : real) : integer;

SFunction. Function ::= "function" String "(" [Stm] ")" ":" Type;

