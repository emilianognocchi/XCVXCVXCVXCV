comment "(*" "*)";

SProgram. Program ::= "program" Type ";" BloqueConst BloqueTipos BloqueVariables BloqueBegin; --Const BloqueVariables BloqueVariables BloquePrincipal [Funciones] [Instrucciones];
TIdent. Type ::= Ident;
--TVoid. Type ::= "void";
TChar. Type ::= "char";
TString. Type ::= "string";

STiposVacio. BloqueTipos ::=;
STipos. BloqueTipos ::= "type" [DefinicionTipos];

TRangoRegistro. TipoRegistro ::= "record" [CampoRegistro] "end";
TCampoRegistro. CampoRegistro ::= [Ident] ":" TipoConcreto;
separator CampoRegistro ";";

SDefinicionTipos. DefinicionTipos ::= Ident "=" TipoConcreto;
SRegistro. TipoConcreto ::= TipoRegistro;
STipoConcretoEnum. TipoConcreto ::= Enumerados;
STipoConcretoRango. TipoConcreto ::= RangoIdent;
STipoConcretoArray. TipoConcreto ::= RangoArray;
separator DefinicionTipos ";"; 
 
BloqueBeginVacio. BloqueBegin ::=;
BloqueConstVacio. BloqueConst ::=;
SBloqueConst. BloqueConst ::= "const" [DefinicionConstantes];
SDefinicionConstantes. DefinicionConstantes ::= Ident "=" Lit;
terminator DefinicionConstantes ";";

SLitInteger. Lit ::= Integer;
SLitDouble. Lit ::= Double;
SLitString. Lit ::= String;
SLitChar. Lit ::= Char;


SBloqueBegin. BloqueBegin ::= "begin" [Stm] "end.";
SAsignacion. Stm ::= Variable ":=" Exp;

SDesignacionCampoAExpresion.  Stm ::= Variable "." Ident ":=" [Exp];

--============ VARIABLES  ================> 
SVariableIdent. Variable ::= Ident; 
SVariableIndexada. Variable ::= "[" [ Exp ] "]";
SDesignacionCampo.  Exp ::= Variable "." Ident; --PREGUNTAR SI ESTO ESTA BIEN, PRUEBA 5


BloqueVariablesVacio. BloqueVariables ::=;

SBloqueVariables. BloqueVariables ::= "var" [DeclaracionVariables];
SDeclaracionVariables. DeclaracionVariables ::= [Ident] ":" Type;
terminator DeclaracionVariables ";";
separator Ident ","; 
 
SStmVacio. Stm  ::=;
SSentenciaVacia. Stm ::= Ident;
SSentencia. Stm ::= Ident "(" [ Exp ] ")";

separator nonempty Stm ";";

EInt. Exp4 ::= Integer;
EDouble. Exp4 ::= Double;
EString. Exp4 ::= String;
ETrue. Exp4 ::= "true";
EFalse. Exp4 ::= "false";
EIdent. Exp4 ::= Ident;


-------MAYOR -3 PRECEDENCIA =====
SMenorIgual. Exp3 ::= Exp3 "<" Exp4;
SMayorIgual. Exp3 ::= Exp3 "<=" Exp4 ;
SMayor. Exp3 ::= Exp3 ">" Exp4;
SDiferentes. Exp3 ::= Exp3 "<>" Exp4 ;

SMenor. Exp3 ::= Exp3 ">=" Exp4;
SIgual. Exp3 ::= Exp3 "=" Exp4;
SIn. Exp3 ::= Exp3 "in" Exp4;
SSs. Exp3 ::= Exp4;

-------MAYOR -2 PRECEDENCIA =====
SOr. Exp2 ::= Exp2 "or" Exp3;
SMenos. Exp2 ::= Exp2 "-" Exp3;
SMas. Exp2 ::= Exp2 "+" Exp3;
SS. Exp2 ::= Exp3;

-------MAYOR -1 PRECEDENCIA =====
SMod. Exp1 ::= Exp1 "mod" Exp2; 
SDivision. Exp1 ::= Exp1 "div" Exp2;
SDiv. Exp1 ::= Exp1 "/" Exp2;
SAnd. Exp1 ::= Exp1 "and" Exp2;
SMultiplicacion. Exp1 ::= Exp1 "*"Exp2;
SM. Exp1 ::= Exp2;


-------MAYOR  PRECEDENCIA =====
SNegacion. Exp ::= "not" Exp;
SExp. Exp ::= Exp1;
separator Exp ",";

--============ TIPOS ENUMERADOS  ================> 
TEnumerados. Enumerados ::= "(" [Ident] ")";
TRangoInteger. RangoIdent ::=  Integer ".." Integer;
TRangoChar. RangoIdent ::=  Char ".." Char;
TRangoIdent. RangoIdent ::=  Ident ".." Ident;
TRangoArray. RangoArray	::= "array" "[" Integer ".." Integer "]" "of" Type ";"; 


SRepeat. Stm ::= "repeat" [Stm] "until" [Exp]; 
SFor. Stm ::= "for" Ident ":=" Exp "to" Exp "do" Stm;








