comment "(*" "*)";

SProgram. Program ::= "program" Type ";" BloquesPrincipales "."; 
TIdent. Type ::= Ident;
--TVoid. Type ::= "void";
TChar. Type ::= "char";
TString. Type ::= "string";

SBloquesPrincipales. BloquesPrincipales ::= BloqueConst BloqueTipos BloqueVariables BloqueBegin;


STiposVacio. BloqueTipos ::=;
STipos. BloqueTipos ::= "type" [DefinicionTipos];

BloqueBeginVacio. BloqueBegin ::=;
BloqueConstVacio. BloqueConst ::=;
SBloqueConst. BloqueConst ::= "const" [DefinicionConstantes];
SDefinicionConstantes. DefinicionConstantes ::= Ident "=" Lit;
terminator DefinicionConstantes ";";

SLitInteger. Lit ::= Integer;
SLitDouble. Lit ::= Double;
SLitString. Lit ::= String;
SLitChar. Lit ::= Char;


SBloqueBegin. BloqueBegin ::= "begin" [Stm] "end";
SAsignacion. Stm ::= Variable ":=" Exp;

SDesignacionCampoAExpresion.  Stm ::= Variable "." Ident ":=" [Exp];
SDefinicionTipos. 	DefinicionTipos ::= Ident "=" TipoConcreto;
separator DefinicionTipos ";"; 


STipoConcretoEnum. 	TipoConcreto ::= Enumerados;
STipoConcretoRango. TipoConcreto ::= RangoIdent;
STipoConcretoArray. TipoConcreto ::= RangoArray;
SRegistro. 			TipoConcreto ::= TipoRegistro;

TRangoRegistro. TipoRegistro ::= "record" [CampoRegistro] "end";  ---prueba 5 falla por esto
TCampoRegistro. CampoRegistro ::= Ident ":" TipoConcreto;
separator CampoRegistro ";";


--============ VARIABLES  ================> 
SVariableIdent. 	Variable ::= Ident; 
SVariableIndexada. 	Variable ::= "[" [ Exp ] "]";
SDesignacionCampo.  Exp ::= Variable "." Ident;

BloqueVariablesVacio. 	BloqueVariables ::=;
SBloqueVariables. 		BloqueVariables ::= "var" [DeclaracionVariables];
SDeclaracionVariables. 	DeclaracionVariables ::= [Ident] ":" Type;
terminator DeclaracionVariables ";";
separator Ident ","; 
 
SStmVacio. Stm  ::=;
SSentenciaVacia. Stm ::= Ident;
SSentencia. Stm ::= Ident "(" [ Exp ] ")";

separator nonempty Stm ";";

--============ EXPRESIONES  ================> 

------- NIVEL 0 =====
separator Exp ",";
coercions Exp 4;

------- NIVEL 1 ===== 
SMenorIgual. Exp1 ::= Exp1 "<" Exp2;
SMayorIgual. Exp1 ::= Exp1 "<=" Exp2 ;
SMayor. Exp1 ::= Exp1 ">" Exp2;
SDiferentes. Exp1 ::= Exp1 "<>" Exp2 ;
SMenor. Exp1 ::= Exp1 ">=" Exp2;
SIgual. Exp1 ::= Exp1 "=" Exp2;
SIn. Exp1 ::= Exp1 "in" Exp2;

------- NIVEL 2 =====
SOr. Exp2 ::= Exp2 "or" Exp3;
SMenos. Exp2 ::= Exp2 "-" Exp3;
SMas. Exp2 ::= Exp2 "+" Exp3;

------- NIVEL 3 =====
SMod. Exp3 ::= Exp3 "mod" Exp4; 
SDivision. Exp3 ::= Exp3 "div" Exp4;
SDiv. Exp3 ::= Exp3 "/" Exp4;
SAnd. Exp3 ::= Exp3 "and" Exp4;
SMultiplicacion. Exp3 ::= Exp3 "*"Exp4;

------- NIVEL 4 =====
EInt. Exp4 ::= Integer;
EDouble. Exp4 ::= Double;
EString. Exp4 ::= String;
ETrue. Exp4 ::= "true";
EFalse. Exp4 ::= "false";
EIdent. Exp4 ::= Ident;
ENegacion. Exp4 ::= "not" Exp4; -- no esta funcionando !!!!

--============ TIPOS ENUMERADOS  ================> 
TEnumerados. 	Enumerados ::= "(" [Ident] ")";
TRangoInteger. 	RangoIdent ::=  Integer ".." Integer;
TRangoChar. 	RangoIdent ::=  Char ".." Char;
TRangoIdent. 	RangoIdent ::=  Ident ".." Ident;
TRangoArray. 	RangoArray	::= "array" "[" Integer ".." Integer "]" "of" Type ";"; 

--============ ESTRUCTURAS DE CONTROL Y REPETICION  ================> 
SRepeat. 	Stm ::= "repeat" [Stm] "until" [Exp]; 
SFor. 		Stm ::= "for" Ident ":=" Exp "to" Exp "do" Stm;
SIf. 		Stm ::= "if"  Exp "then" Stm;
SIfElse. 	Stm ::= "if"  Exp  "then" Stm "else" Stm;
SWhile. 	Stm ::= "while" "(" Exp ")" Stm;
SCase. 		Stm ::= "case" "(" Discriminante ")" "of" [Ramas] "end";
SDiscriminante. Discriminante ::= Ident;
SRamas. 	Ramas ::= [Lit] ":" BloqueBegin;  -- reduce / reduce 
SRamasStm. 	Ramas ::= [Lit] ":" Stm;  -- reduce / reduce 

separator nonempty Ramas ";";
separator Lit ",";

--============ FUNCIONES Y PRODCEDIMIENTOS  ================> 
SProcedure. Stm ::= "procedure" Ident "(" [VariablesParametro] ")";
SVariablesParametroPorReferencia. 	VariablesParametro ::= "var" DeclaracionVariables;
SVariablesParametroPorValor. 		VariablesParametro ::= DeclaracionVariables;
separator VariablesParametro ";";

--SFunction. Stm ::= "function" Ident "(" [VariablesParametro] ")" ":" Type ";" BloquesPrincipales; 











