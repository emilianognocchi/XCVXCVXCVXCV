comment "(*" "*)";

SProgram. Program ::= "program" Type ";" BloqueConst BloqueVariables BloqueBegin; --Const BloqueVariables BloqueVariables BloquePrincipal [Funciones] [Instrucciones];
TIdent. Type ::= Ident;
TInt. Type ::= "void";
TChar. Type ::= "char";
TString. Type ::= "string";
 
BloqueBeginVacio. BloqueBegin ::=;
BloqueConstVacio. BloqueConst ::=;
SBloqueConst. BloqueConst ::= "const" [DefinicionConstantes];
SDefinicionConstantes. DefinicionConstantes ::= Ident "=" Lit;
terminator DefinicionConstantes ";";

SLitInteger. Lit ::= Integer;
SLitDouble. Lit ::= Double;
SLitString. Lit ::= String;
SLitChar. Lit ::= Char;


SBloqueBegin. BloqueBegin ::= "begin" [Stm] "end.";

BloqueVariablesVacio. BloqueVariables ::=;

SBloqueVariables. BloqueVariables ::= "var" [DeclaracionVariables];
SDeclaracionVariables. DeclaracionVariables ::= [Ident] ":" Type;
terminator DeclaracionVariables ";";
separator Ident ",";

--SStmVacio. Stm ::=;
--separator Stm ";"; --ESTO DA CONFLICTOS
 
SStmVacio. Stm  ::=;
SSentenciaVacia. Stm ::= Ident;
SSentencia. Stm ::= Ident "(" [ Exp ] ")";

separator nonempty Stm ";";
--separator Exp ",";

EInt. Exp15 ::= Integer;
EDouble. Exp15 ::= Double;
EString. Exp15 ::= String;
ETrue. Exp15 ::= "true";
EFalse. Exp15 ::= "false";

EIdent. Exp15 ::= Ident;

SExp. Exp ::= Exp15;
separator Exp ",";

