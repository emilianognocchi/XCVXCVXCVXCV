comment "(*" "*)";

SProgram. Program ::= "program" Type ";" BloqueConst BloqueTipos BloqueVariables BloqueBegin; --Const BloqueVariables BloqueVariables BloquePrincipal [Funciones] [Instrucciones];
TIdent. Type ::= Ident;
--TVoid. Type ::= "void";
TChar. Type ::= "char";
TString. Type ::= "string";

STiposVacio. BloqueTipos ::=;
STipos. BloqueTipos ::= "type" [DefinicionTipos];

TRangoRegistro. TipoRegistro ::= "record" [CampoRegistro] "end";
TCampoRegistro. CampoRegistro ::= [Ident] ":" TipoConcreto;
separator CampoRegistro ";";

SDefinicionTipos. DefinicionTipos ::= Ident "=" TipoConcreto;
SRegistro. TipoConcreto ::= TipoRegistro;
STipoConcretoEnum. TipoConcreto ::= Enumerados;
STipoConcretoRango. TipoConcreto ::= RangoIdent;
STipoConcretoArray. TipoConcreto ::= RangoArray;
separator DefinicionTipos ";"; 
 
BloqueBeginVacio. BloqueBegin ::=;
BloqueConstVacio. BloqueConst ::=;
SBloqueConst. BloqueConst ::= "const" [DefinicionConstantes];
SDefinicionConstantes. DefinicionConstantes ::= Ident "=" Lit;
terminator DefinicionConstantes ";";

SLitInteger. Lit ::= Integer;
SLitDouble. Lit ::= Double;
SLitString. Lit ::= String;
SLitChar. Lit ::= Char;


SBloqueBegin. BloqueBegin ::= "begin" [Stm] "end.";
SAsignacion. Stm ::= Variable ":=" Exp;
SDesignacionCampoAExpresion.  Stm ::= Variable "." Ident ":=" [Exp];

--============ VARIABLES  ================> 
SVariableIdent. Variable ::= Ident; 
SVariableIndexada. Variable ::= "[" [ Exp ] "]";
SDesignacionCampo.  Exp ::= Variable "." Ident; --PREGUNTAR SI ESTO ESTA BIEN, PRUEBA 5


BloqueVariablesVacio. BloqueVariables ::=;

SBloqueVariables. BloqueVariables ::= "var" [DeclaracionVariables];
SDeclaracionVariables. DeclaracionVariables ::= [Ident] ":" Type;
terminator DeclaracionVariables ";";
separator Ident ","; 
 
SStmVacio. Stm  ::=;
SSentenciaVacia. Stm ::= Ident;
SSentencia. Stm ::= Ident "(" [ Exp ] ")";

separator nonempty Stm ";";

EInt. Exp15 ::= Integer;
EDouble. Exp15 ::= Double;
EString. Exp15 ::= String;
ETrue. Exp15 ::= "true";
EFalse. Exp15 ::= "false";

EIdent. Exp15 ::= Ident;

SExp. Exp ::= Exp15;
separator Exp ",";

--============ TIPOS ENUMERADOS  ================> 
TEnumerados. Enumerados ::= "(" [Ident] ")";
TRangoInteger. RangoIdent ::=  Integer ".." Integer;
TRangoChar. RangoIdent ::=  Char ".." Char;
TRangoIdent. RangoIdent ::=  Ident ".." Ident;
TRangoArray. RangoArray	::= "array" "[" Integer ".." Integer "]" "of" Type ";"; 









